{"version":3,"sources":["Node.js","Block.js","Blocks.js","algorithm/fill.js","algorithm/move.js","algorithm/remove.js","algorithm/increaseGrid.js","App.js","reportWebVitals.js","index.js"],"names":["Node","this","props","node","row","col","full","className","style","width","nodeSize","height","id","Component","Block","block","color","arrow","console","log","left","document","getElementById","offsetLeft","top","offsetTop","backgroundColor","Blocks","state","blocks","map","blockIdx","fill","grid","length","undercol","nodeRow","nodeCol","Math","random","push","error","setState","move","i","currRow","currCol","underCurrCol","remove","blocksLength","j","splice","increaseGrid","nodes","currSize","App","currStep","stop","step","bind","play","playing","setTimeout","onClick","rowIdx","nodeIdx","React","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"qSAGqBA,G,mLACT,IAAD,EACkBC,KAAKC,MAAMC,KAA9BC,EADC,EACDA,IAAKC,EADJ,EACIA,IAAKC,EADT,EACSA,KAChB,OACE,qBACEC,UAAU,OACVC,MAAO,CAAEC,MAAOR,KAAKC,MAAMQ,SAAUC,OAAQV,KAAKC,MAAMQ,UACxDE,GAAE,eAAUR,EAAV,YAAiBC,GAHrB,SAMGC,Q,GAVyBO,cCAbC,G,6KACT,IAAD,EAC0Bb,KAAKC,MAAMa,MAAtCX,EADC,EACDA,IAAKC,EADJ,EACIA,IAAKW,EADT,EACSA,MAAOC,EADhB,EACgBA,MAGvB,OAFAC,QAAQC,IAAIf,EAAKC,GAEH,OAAVY,GAA4B,SAAVA,EAElB,qBACET,MAAO,CACLY,KAAMC,SAASC,eAAT,eAAgClB,EAAhC,YAAuCC,IAAOkB,WACpDC,IAAKH,SAASC,eAAT,eAAgClB,EAAhC,YAAuCC,IAAOoB,UACnDC,gBAAiBV,EACjBP,MAAO,EAAIR,KAAKC,MAAMQ,SACtBC,OAAQV,KAAKC,MAAMQ,UAErBH,UAAU,QACVK,GAAE,gBAAWR,EAAX,YAAkBC,KAKtB,qBACEG,MAAO,CACLY,KAAMC,SAASC,eAAT,eAAgClB,EAAhC,YAAuCC,IAAOkB,WACpDC,IAAKH,SAASC,eAAT,eAAgClB,EAAhC,YAAuCC,IAAOoB,UACnDC,gBAAiBV,EACjBP,MAAOR,KAAKC,MAAMQ,SAClBC,OAAQ,EAAIV,KAAKC,MAAMQ,UAEzBH,UAAU,QACVK,GAAE,gBAAWR,EAAX,YAAkBC,S,GA9BKQ,cCMdc,E,kDACnB,WAAYzB,GAAQ,IAAD,8BACjB,cAAMA,IACD0B,MAAQ,GAFI,E,qDAKT,IAAD,OACHC,EAAS5B,KAAKC,MAAM2B,OACxB,OACE,qBAAKtB,UAAU,SAAf,SACGsB,EAAOC,KAAI,SAACf,EAAOgB,GAClB,OACE,cAAC,EAAD,CACEhB,MAAOA,EACPL,SAAU,EAAKR,MAAMQ,UAChBqB,Y,GAfiBlB,aCTrB,SAASmB,IAKtB,IAJA,IAAIH,EAAS5B,KAAK2B,MAAMC,OACpBI,EAAOhC,KAAK2B,MAAMK,KAGb7B,EAAM,EAAGA,EAAM6B,EAAKC,OAAS,EAAG9B,IACvC,IAAK,IAAIC,EAAM,EAAGA,EAAM4B,EAAK7B,GAAK8B,OAAQ7B,IAAO,CAG/C,IAAI8B,OAAQ,EACZ,IAAKA,EAAW,EAAGA,EAAWF,EAAK7B,EAAM,GAAG8B,QACtCD,EAAK7B,EAAM,GAAG+B,GAAU9B,MAAQ4B,EAAK7B,GAAKC,GAAKA,IADD8B,KAOpD,IACE,IACGF,EAAK7B,GAAKC,GAAKC,MACf2B,EAAK7B,GAAKC,EAAM,GAAGC,MACnB2B,EAAK7B,EAAM,GAAG+B,GAAU7B,MACxB2B,EAAK7B,EAAM,GAAG+B,EAAW,GAAG7B,KAC7B,CAGA2B,EAAK7B,GAAKC,GAAKC,KAAO,EACtB2B,EAAK7B,GAAKC,EAAM,GAAGC,KAAO,EAC1B2B,EAAK7B,EAAM,GAAG+B,GAAU7B,KAAO,EAC/B2B,EAAK7B,EAAM,GAAG+B,EAAW,GAAG7B,KAAO,EAGnC,IAAI8B,EAAUH,EAAK7B,GAAKC,GAAKD,IACzBiC,EAAUJ,EAAK7B,GAAKC,GAAKA,IAGzBiC,KAAKC,SAAW,GAClBV,EAAOW,KACL,CAAEpC,IAAKgC,EAAS/B,IAAKgC,EAASrB,MAAO,OAAQC,MAAO,MACpD,CACEb,IAAKgC,EAAU,EACf/B,IAAKgC,EACLrB,MAAO,UACPC,MAAO,SAIXY,EAAOW,KACL,CACEpC,IAAKgC,EACL/B,IAAKgC,EACLrB,MAAO,MACPC,MAAO,QAET,CACEb,IAAKgC,EACL/B,IAAKgC,EAAU,EACfrB,MAAO,QACPC,MAAO,WAKf,MAAOwB,KAMbxC,KAAKyC,SAAS,CACZb,OAAQA,EACRI,KAAMA,ICvEK,SAASU,IAMtB,IALA,IAAId,EAAS5B,KAAK2B,MAAMC,OACpBI,EAAOhC,KAAK2B,MAAMK,KAIb7B,EAAM,EAAGA,EAAM6B,EAAKC,OAAQ9B,IACnC,IAAK,IAAIC,EAAM,EAAGA,EAAM4B,EAAK7B,GAAK8B,OAAQ7B,IACxC4B,EAAK7B,GAAKC,GAAKC,KAAO,EAK1B,IAAK,IAAIsC,EAAI,EAAGA,EAAIf,EAAOK,OAAQU,IAAK,CAAC,IAEnCC,OAAO,EACPC,OAAO,EACPC,OAAY,EAEhB,OALgBlB,EAAOe,GAAjB3B,OAMJ,IAAK,KACHY,EAAOe,GAAGxC,IAAMyB,EAAOe,GAAGxC,IAAM,EAEhC0C,EAAUb,EADVY,EAAUZ,EAAKC,OAAS,EAAI,EAAIL,EAAOe,GAAGxC,KAClB8B,OAAS,EAAI,EAAIL,EAAOe,GAAGvC,IAEnD4B,EAAKY,GAASC,GAASxC,KAAO,EAC9B2B,EAAKY,GAASC,EAAU,GAAGxC,KAAO,EAClC,MAEF,IAAK,OACHuB,EAAOe,GAAGxC,IAAMyB,EAAOe,GAAGxC,IAAM,EAEhC0C,EAAUb,EADVY,EAAUZ,EAAKC,OAAS,EAAI,EAAIL,EAAOe,GAAGxC,KAClB8B,OAAS,EAAI,EAAIL,EAAOe,GAAGvC,IAEnD4B,EAAKY,GAASC,GAASxC,KAAO,EAC9B2B,EAAKY,GAASC,EAAU,GAAGxC,KAAO,EAClC,MAEF,IAAK,QACHuB,EAAOe,GAAGvC,IAAMwB,EAAOe,GAAGvC,IAAM,EAEhCyC,EAAUb,EADVY,EAAUZ,EAAKC,OAAS,EAAI,EAAIL,EAAOe,GAAGxC,KAClB8B,OAAS,EAAI,EAAIL,EAAOe,GAAGvC,IACnD0C,EAAed,EAAKY,EAAU,GAAGX,OAAS,EAAI,EAAIL,EAAOe,GAAGvC,IAE5D4B,EAAKY,GAASC,GAASxC,KAAO,EAC9B2B,EAAKY,EAAU,GAAGE,GAAczC,KAAO,EACvC,MAEF,IAAK,OACHuB,EAAOe,GAAGvC,IAAMwB,EAAOe,GAAGvC,IAAM,EAEhCyC,EAAUb,EADVY,EAAUZ,EAAKC,OAAS,EAAI,EAAIL,EAAOe,GAAGxC,KAClB8B,OAAS,EAAI,EAAIL,EAAOe,GAAGvC,IACnD0C,EAAed,EAAKY,EAAU,GAAGX,OAAS,EAAI,EAAIL,EAAOe,GAAGvC,IAE5D4B,EAAKY,GAASC,GAASxC,KAAO,EAC9B2B,EAAKY,EAAU,GAAGE,GAAczC,KAAO,GAQ7CL,KAAKyC,SAAS,CACZb,OAAQA,EACRI,KAAMA,ICjEK,SAASe,IAItB,IAHA,IAAInB,EAAS5B,KAAK2B,MAAMC,OACpBoB,EAAepB,EAAOK,OAEjBU,EAAI,EAAGA,EAAIK,EAAcL,IAChC,IAAK,IAAIM,EAAI,EAAGA,EAAID,EAAcC,IAChC,OAAQrB,EAAOe,GAAG3B,OAChB,IAAK,OAEAY,EAAOe,GAAGxC,MAAQyB,EAAOqB,GAAG9C,IAAM,EAClCyB,EAAOe,GAAGvC,MAAQwB,EAAOqB,GAAG7C,IACR,OAApBwB,EAAOqB,GAAGjC,QAGP2B,EAAIM,GAENrB,EAAOsB,OAAOD,EAAG,GACjBrB,EAAOsB,OAAOP,EAAG,GACjBA,GAAQ,EACRM,GAAQ,IAERrB,EAAOsB,OAAOP,EAAG,GACjBf,EAAOsB,OAAOD,EAAG,GACjBN,GAAQ,EACRM,GAAQ,GAKVD,GAA8B,GAEhC,MAEF,IAAK,QAEApB,EAAOe,GAAGxC,MAAQyB,EAAOqB,GAAG9C,IAC5ByB,EAAOe,GAAGvC,MAAQwB,EAAOqB,GAAG7C,IAAM,EACd,SAApBwB,EAAOqB,GAAGjC,QAGP2B,EAAIM,GAENrB,EAAOsB,OAAOD,EAAG,GACjBrB,EAAOsB,OAAOP,EAAG,GACjBA,GAAQ,EACRM,GAAQ,IAERrB,EAAOsB,OAAOP,EAAG,GACjBf,EAAOsB,OAAOD,EAAG,GACjBN,GAAQ,EACRM,GAAQ,GAKVD,GAA8B,GAUxChD,KAAKyC,SAAS,CACZb,OAAQA,IClEG,SAASuB,IAMtB,IALA,IAAIC,EAAQ,GACRR,EAAU,GACVS,EAAWrD,KAAK2B,MAAM0B,SAGjBlD,EAAM,EAAGA,EAAMkD,EAAW,EAAGlD,IAAO,CAC3C,IAAK,IAAIC,EAAM,EAAGA,EAAkB,GAAXD,EAAM,GAAQC,IACrCwC,EAAQL,KAAK,CAAEpC,IAAKkD,EAAWlD,EAAKC,IAAKA,EAAMD,EAAKE,KAAM,IAE5D+C,EAAMb,KAAKK,GACXA,EAAU,GAIZ,IAAK,IAAIzC,EAAM,EAAGA,EAAMkD,EAAW,EAAGlD,IAAO,CAC3C,IAAK,IAAIC,EAAM,EAAGA,EAAM,GAAKiD,EAAW,EAAIlD,GAAMC,IAChDwC,EAAQL,KAAK,CACXpC,KAAM,GAAKA,EAAM,GACjBC,IAAKA,EAAMD,EAAMkD,EACjBhD,KAAM,IAGV+C,EAAMb,KAAKK,GACXA,EAAU,GAIZ,IAAIhB,EAAS5B,KAAK2B,MAAMC,OAMxB5B,KAAKyC,SAAS,CACZY,SAAUA,EAAW,EACrBrB,KAAMoB,EACNxB,OAAQA,I,IC6GG0B,E,kDAxIb,WAAYrD,GAAQ,IAAD,8BACjB,cAAMA,IACD0B,MAAQ,CACX0B,SAAU,EACVrB,KAAM,GACNJ,OAAQ,GACRnB,SAAU,GACV8C,SAAU,EACVC,KAAM,GAER,EAAKC,KAAO,EAAKA,KAAKC,KAAV,gBACZ,EAAKC,KAAO,EAAKA,KAAKD,KAAV,gBACZ,EAAK3B,KAAOA,EAAK2B,KAAL,gBACZ,EAAKhB,KAAOA,EAAKgB,KAAL,gBACZ,EAAKX,OAASA,EAAOW,KAAP,gBACd,EAAKP,aAAeA,EAAaO,KAAb,gBACpB,EAAKC,KAAO,EAAKA,KAAKD,KAAV,gBACZ,EAAKF,KAAO,EAAKA,KAAKE,KAAV,gBACZ,EAAKE,QAAU,EAAKA,QAAQF,KAAb,gBAlBE,E,mDAsBjB,OAAQ1D,KAAK2B,MAAM4B,SAAW,GAC5B,KAAK,EACHvD,KAAKmD,eACL,MAEF,KAAK,EACHnD,KAAK+C,SACL,MAEF,KAAK,EACH/C,KAAK0C,OACL,MAEF,KAAK,EACH1C,KAAK+B,OAOT/B,KAAKyC,SAAS,CACZc,SAAUvD,KAAK2B,MAAM4B,SAAW,M,6BAI5B,IAAD,OACLvD,KAAKyC,SAAS,CACZe,KAAM,IAGRK,YAAW,kBAAM,EAAKD,YAAW,K,gCAGxB,IAAD,OACJ5D,KAAK2B,MAAM6B,OAIfxD,KAAKyD,OAELI,YAAW,WACT,EAAKD,YACJ,Q,6BAIH5D,KAAKyC,SAAS,CACZe,KAAM,M,0CAmBRxD,KAAKyC,SAAS,CACZT,KAfU,CACV,CACE,CAAE7B,IAAK,EAAGC,IAAK,EAAGC,KAAM,GACxB,CAAEF,IAAK,EAAGC,IAAK,EAAGC,KAAM,IAE1B,CACE,CAAEF,KAAM,EAAGC,IAAK,EAAGC,KAAM,GACzB,CAAEF,KAAM,EAAGC,IAAK,EAAGC,KAAM,S,+BAarB,IAAD,OACC2B,EAAShC,KAAK2B,MAAdK,KACR,OACE,sBAAK1B,UAAU,MAAf,UACE,qBAAKA,UAAU,aAAf,2BACA,wBAAQwD,QAAS9D,KAAKyD,KAAMnD,UAAU,SAAtC,kBAGA,wBAAQwD,QAAS9D,KAAK2D,KAAMrD,UAAU,SAAtC,kBAGA,wBAAQwD,QAAS9D,KAAKwD,KAAMlD,UAAU,SAAtC,kBAOA,qBAAKA,UAAU,OAAf,SACG0B,EAAKH,KAAI,SAAC1B,EAAK4D,GACd,OACE,8BACG5D,EAAI0B,KAAI,SAAC3B,EAAM8D,GACd,OACE,cAAC,EAAD,CACE9D,KAAMA,EACNO,SAAU,EAAKkB,MAAMlB,UAChBuD,OANHD,QAchB,cAAC,EAAD,CAAQnC,OAAQ5B,KAAK2B,MAAMC,OAAQnB,SAAUT,KAAK2B,MAAMlB,kB,GAnI9CwD,IAAMrD,WCGTsD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFzD,SAASC,eAAe,SAM1B6C,M","file":"static/js/main.dff3bf22.chunk.js","sourcesContent":["import React, { Component } from \"react\"\r\nimport \"./Node.css\"\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    let { row, col, full } = this.props.node\r\n    return (\r\n      <div\r\n        className=\"node\"\r\n        style={{ width: this.props.nodeSize, height: this.props.nodeSize }}\r\n        id={`node ${row} ${col}`}\r\n      >\r\n        {/* {`${row}${col}`} */}\r\n        {full}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from \"react\"\r\nimport \"./Block.css\"\r\n\r\nexport default class Block extends Component {\r\n  render() {\r\n    let { row, col, color, arrow } = this.props.block\r\n    console.log(row, col)\r\n\r\n    if (arrow === \"up\" || arrow === \"down\") {\r\n      return (\r\n        <div\r\n          style={{\r\n            left: document.getElementById(`node ${row} ${col}`).offsetLeft,\r\n            top: document.getElementById(`node ${row} ${col}`).offsetTop,\r\n            backgroundColor: color,\r\n            width: 2 * this.props.nodeSize,\r\n            height: this.props.nodeSize,\r\n          }}\r\n          className=\"block\"\r\n          id={`block ${row} ${col}`}\r\n        ></div>\r\n      )\r\n    } else {\r\n      return (\r\n        <div\r\n          style={{\r\n            left: document.getElementById(`node ${row} ${col}`).offsetLeft,\r\n            top: document.getElementById(`node ${row} ${col}`).offsetTop,\r\n            backgroundColor: color,\r\n            width: this.props.nodeSize,\r\n            height: 2 * this.props.nodeSize,\r\n          }}\r\n          className=\"block\"\r\n          id={`block ${row} ${col}`}\r\n        ></div>\r\n      )\r\n    }\r\n  }\r\n}\r\n","//FIXME add an array of blocks to be rendered in render()\r\n//FIXME add a class for each type of block\r\n//FIXME have the position and type of block in blocks in the state of App\r\n//FIXME send the position and type through the props to blocks and then each block\r\n//FIXME figure out how to get the grid to line up\r\n\r\nimport React, { Component } from \"react\"\r\nimport Block from \"./Block.js\"\r\n\r\nexport default class Blocks extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {}\r\n  }\r\n\r\n  render() {\r\n    let blocks = this.props.blocks\r\n    return (\r\n      <div className=\"blocks\">\r\n        {blocks.map((block, blockIdx) => {\r\n          return (\r\n            <Block\r\n              block={block}\r\n              nodeSize={this.props.nodeSize}\r\n              key={blockIdx}\r\n            />\r\n          )\r\n        })}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","export default function fill() {\r\n  let blocks = this.state.blocks\r\n  let grid = this.state.grid\r\n  // console.log(grid)\r\n  //find empty squares\r\n  for (let row = 0; row < grid.length - 1; row++) {\r\n    for (let col = 0; col < grid[row].length; col++) {\r\n      // console.log(grid[row + 1][col])\r\n      //find col of undernode\r\n      let undercol\r\n      for (undercol = 0; undercol < grid[row + 1].length; undercol++) {\r\n        if (grid[row + 1][undercol].col === grid[row][col].col) {\r\n          break\r\n        }\r\n      }\r\n\r\n      // console.log(row, col)\r\n      try {\r\n        if (\r\n          !grid[row][col].full &\r\n          !grid[row][col + 1].full &\r\n          !grid[row + 1][undercol].full &\r\n          !grid[row + 1][undercol + 1].full\r\n        ) {\r\n          // console.log(\"empty square\")\r\n          //set the full values of the nodes to 1\r\n          grid[row][col].full = 1\r\n          grid[row][col + 1].full = 1\r\n          grid[row + 1][undercol].full = 1\r\n          grid[row + 1][undercol + 1].full = 1\r\n\r\n          //add new blocks to fill the empty square\r\n          var nodeRow = grid[row][col].row\r\n          var nodeCol = grid[row][col].col\r\n\r\n          //randomly choose vertical or horizontal blocks to fill\r\n          if (Math.random() < 0.5) {\r\n            blocks.push(\r\n              { row: nodeRow, col: nodeCol, color: \"blue\", arrow: \"up\" },\r\n              {\r\n                row: nodeRow - 1,\r\n                col: nodeCol,\r\n                color: \"HotPink\",\r\n                arrow: \"down\",\r\n              }\r\n            )\r\n          } else {\r\n            blocks.push(\r\n              {\r\n                row: nodeRow,\r\n                col: nodeCol,\r\n                color: \"red\",\r\n                arrow: \"left\",\r\n              },\r\n              {\r\n                row: nodeRow,\r\n                col: nodeCol + 1,\r\n                color: \"green\",\r\n                arrow: \"right\",\r\n              }\r\n            )\r\n          }\r\n        }\r\n      } catch (error) {\r\n        // console.log(\"no square\")\r\n      }\r\n    }\r\n  }\r\n\r\n  this.setState({\r\n    blocks: blocks,\r\n    grid: grid,\r\n  })\r\n}\r\n","export default function move() {\r\n  let blocks = this.state.blocks\r\n  let grid = this.state.grid\r\n  //   let newBlocks = []\r\n\r\n  //set all the full values to 0\r\n  for (let row = 0; row < grid.length; row++) {\r\n    for (let col = 0; col < grid[row].length; col++) {\r\n      grid[row][col].full = 0\r\n    }\r\n  }\r\n\r\n  //move all the blocks according to their arrows and update full values\r\n  for (let i = 0; i < blocks.length; i++) {\r\n    let { arrow } = blocks[i]\r\n    let currRow\r\n    let currCol\r\n    let underCurrCol\r\n\r\n    switch (arrow) {\r\n      case \"up\":\r\n        blocks[i].row = blocks[i].row + 1\r\n        currRow = grid.length / 2 - 1 - blocks[i].row\r\n        currCol = grid[currRow].length / 2 - 1 + blocks[i].col\r\n\r\n        grid[currRow][currCol].full = 1\r\n        grid[currRow][currCol + 1].full = 1\r\n        break\r\n\r\n      case \"down\":\r\n        blocks[i].row = blocks[i].row - 1\r\n        currRow = grid.length / 2 - 1 - blocks[i].row\r\n        currCol = grid[currRow].length / 2 - 1 + blocks[i].col\r\n\r\n        grid[currRow][currCol].full = 1\r\n        grid[currRow][currCol + 1].full = 1\r\n        break\r\n\r\n      case \"right\":\r\n        blocks[i].col = blocks[i].col + 1\r\n        currRow = grid.length / 2 - 1 - blocks[i].row\r\n        currCol = grid[currRow].length / 2 - 1 + blocks[i].col\r\n        underCurrCol = grid[currRow + 1].length / 2 - 1 + blocks[i].col\r\n\r\n        grid[currRow][currCol].full = 1\r\n        grid[currRow + 1][underCurrCol].full = 1\r\n        break\r\n\r\n      case \"left\":\r\n        blocks[i].col = blocks[i].col - 1\r\n        currRow = grid.length / 2 - 1 - blocks[i].row\r\n        currCol = grid[currRow].length / 2 - 1 + blocks[i].col\r\n        underCurrCol = grid[currRow + 1].length / 2 - 1 + blocks[i].col\r\n\r\n        grid[currRow][currCol].full = 1\r\n        grid[currRow + 1][underCurrCol].full = 1\r\n        break\r\n\r\n      default:\r\n        break\r\n    }\r\n  }\r\n\r\n  this.setState({\r\n    blocks: blocks,\r\n    grid: grid,\r\n  })\r\n}\r\n","export default function remove() {\r\n  let blocks = this.state.blocks\r\n  let blocksLength = blocks.length\r\n\r\n  for (let i = 0; i < blocksLength; i++) {\r\n    for (let j = 0; j < blocksLength; j++) {\r\n      switch (blocks[i].arrow) {\r\n        case \"down\":\r\n          if (\r\n            (blocks[i].row === blocks[j].row + 1) &\r\n            (blocks[i].col === blocks[j].col) &\r\n            (blocks[j].arrow === \"up\")\r\n          ) {\r\n            //blocks will collide so remove them\r\n            if (i < j) {\r\n              // this condition ensures the splicing happens in the right order and we don't skip any elements from shifting the array\r\n              blocks.splice(j, 1)\r\n              blocks.splice(i, 1)\r\n              i = i - 1\r\n              j = j - 2\r\n            } else {\r\n              blocks.splice(i, 1)\r\n              blocks.splice(j, 1)\r\n              i = i - 2\r\n              j = j - 1\r\n            }\r\n\r\n            //decrease i by 1 so you don't skip the next element at i+1\r\n            //decrease blocksLength by 2 since you're removing 2 elements\r\n            blocksLength = blocksLength - 2\r\n          }\r\n          break\r\n\r\n        case \"right\":\r\n          if (\r\n            (blocks[i].row === blocks[j].row) &\r\n            (blocks[i].col === blocks[j].col - 1) &\r\n            (blocks[j].arrow === \"left\")\r\n          ) {\r\n            //blocks will collide so remove them\r\n            if (i < j) {\r\n              // this condition ensures the splicing happens in the right order and we don't skip any elements from shifting the array\r\n              blocks.splice(j, 1)\r\n              blocks.splice(i, 1)\r\n              i = i - 1\r\n              j = j - 2\r\n            } else {\r\n              blocks.splice(i, 1)\r\n              blocks.splice(j, 1)\r\n              i = i - 2\r\n              j = j - 1\r\n            }\r\n\r\n            //decrease i by 1 so you don't skip the next element at i+1\r\n            //decrease blocksLength by 2 since you're removing 2 elements\r\n            blocksLength = blocksLength - 2\r\n          }\r\n          break\r\n\r\n        default:\r\n          break\r\n      }\r\n    }\r\n  }\r\n\r\n  this.setState({\r\n    blocks: blocks,\r\n  })\r\n}\r\n","export default function increaseGrid() {\r\n  let nodes = []\r\n  let currRow = []\r\n  let currSize = this.state.currSize\r\n\r\n  // Make top half\r\n  for (let row = 0; row < currSize + 1; row++) {\r\n    for (let col = 0; col < (row + 1) * 2; col++) {\r\n      currRow.push({ row: currSize - row, col: col - row, full: 0 })\r\n    }\r\n    nodes.push(currRow)\r\n    currRow = []\r\n  }\r\n\r\n  //make bottom half\r\n  for (let row = 0; row < currSize + 1; row++) {\r\n    for (let col = 0; col < 2 * (currSize + 1 - row); col++) {\r\n      currRow.push({\r\n        row: -1 * (row + 1),\r\n        col: col + row - currSize,\r\n        full: 0,\r\n      })\r\n    }\r\n    nodes.push(currRow)\r\n    currRow = []\r\n  }\r\n\r\n  //shift all blocks down by 50px\r\n  let blocks = this.state.blocks //FIXME this doesn't work\r\n\r\n  // for (let i = 0; i < this.state.blocks.length; i++) {\r\n  //   blocks[i].ypos = blocks[i].ypos + this.state.nodeSize\r\n  // }\r\n\r\n  this.setState({\r\n    currSize: currSize + 1,\r\n    grid: nodes,\r\n    blocks: blocks,\r\n  })\r\n}\r\n","import React from \"react\"\r\nimport \"./App.css\"\r\nimport Node from \"./Node.js\"\r\nimport Blocks from \"./Blocks.js\"\r\nimport fill from \"./algorithm/fill.js\"\r\nimport move from \"./algorithm/move.js\"\r\nimport remove from \"./algorithm/remove.js\"\r\nimport increaseGrid from \"./algorithm/increaseGrid.js\"\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      currSize: 1,\r\n      grid: [],\r\n      blocks: [],\r\n      nodeSize: 30,\r\n      currStep: 3,\r\n      stop: 0,\r\n    }\r\n    this.step = this.step.bind(this)\r\n    this.play = this.play.bind(this)\r\n    this.fill = fill.bind(this)\r\n    this.move = move.bind(this)\r\n    this.remove = remove.bind(this)\r\n    this.increaseGrid = increaseGrid.bind(this)\r\n    this.play = this.play.bind(this)\r\n    this.stop = this.stop.bind(this)\r\n    this.playing = this.playing.bind(this)\r\n  }\r\n\r\n  step() {\r\n    switch (this.state.currStep % 4) {\r\n      case 0:\r\n        this.increaseGrid()\r\n        break\r\n\r\n      case 1:\r\n        this.remove()\r\n        break\r\n\r\n      case 2:\r\n        this.move()\r\n        break\r\n\r\n      case 3:\r\n        this.fill()\r\n        break\r\n\r\n      default:\r\n        break\r\n    }\r\n    // console.log(this.state.currStep % 4)\r\n    this.setState({\r\n      currStep: this.state.currStep + 1,\r\n    })\r\n  }\r\n\r\n  play() {\r\n    this.setState({\r\n      stop: 0,\r\n    })\r\n\r\n    setTimeout(() => this.playing(), 1) //otherwise the playing call happens before stop is set to 0\r\n  }\r\n\r\n  playing() {\r\n    if (this.state.stop) {\r\n      return\r\n    }\r\n\r\n    this.step()\r\n\r\n    setTimeout(() => {\r\n      this.playing()\r\n    }, 500)\r\n  }\r\n\r\n  stop() {\r\n    this.setState({\r\n      stop: 1,\r\n    })\r\n  }\r\n\r\n  componentDidMount() {\r\n    let nodes = [\r\n      [\r\n        { row: 0, col: 0, full: 0 },\r\n        { row: 0, col: 1, full: 0 },\r\n      ],\r\n      [\r\n        { row: -1, col: 0, full: 0 },\r\n        { row: -1, col: 1, full: 0 },\r\n      ],\r\n    ]\r\n    // let bloks = [\r\n    //   { xpos: 300, ypos: 300, color: \"blue\", arrow: \"down\" },\r\n    //   { xpos: 300, ypos: 350, color: \"red\", arrow: \"up\" },\r\n    // ]\r\n    this.setState({\r\n      grid: nodes,\r\n      // blocks: bloks,\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { grid } = this.state\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"App-header\">i! love! you!</div>\r\n        <button onClick={this.step} className=\"button\">\r\n          Step\r\n        </button>\r\n        <button onClick={this.play} className=\"button\">\r\n          Play\r\n        </button>\r\n        <button onClick={this.stop} className=\"button\">\r\n          Stop\r\n        </button>\r\n        {/* <button onClick={this.increaseGrid}>IncreaseGrid</button> */}\r\n        {/* <button onClick={this.fill}>Fill</button> */}\r\n        {/* <button onClick={this.move}>Move</button> */}\r\n        {/* <button onClick={this.remove}>Remove</button> */}\r\n        <div className=\"grid\">\r\n          {grid.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx}>\r\n                {row.map((node, nodeIdx) => {\r\n                  return (\r\n                    <Node\r\n                      node={node}\r\n                      nodeSize={this.state.nodeSize}\r\n                      key={nodeIdx}\r\n                    />\r\n                  )\r\n                })}\r\n              </div>\r\n            )\r\n          })}\r\n        </div>\r\n        <Blocks blocks={this.state.blocks} nodeSize={this.state.nodeSize} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}